{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","add","timestamp","FieldValue","serverTimestamp","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAoBeA,EAhBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACtBC,EADmD,EAApBC,WACTF,EAAQE,SACpC,OACE,qBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAA/C,SACE,cAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,qBAAhD,SACE,cAACI,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,KAAjD,WACIR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,KAAqD,IACrDF,EAAQA,oB,QCINU,EAHKC,IAASC,cAVN,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIMC,Y,yBC0FRC,MAxFf,WAAe,MAIaC,mBAAS,IAJtB,mBAINC,EAJM,KAICC,EAJD,OAKmBF,mBAAS,IAL5B,mBAKNG,EALM,KAKIC,EALJ,OAMmBJ,mBAAS,IAN5B,mBAMNpB,EANM,KAMIyB,EANJ,KAuCb,OA3BAC,qBAAU,WACRlB,EAAGmB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAIpC,QAASmC,EAAIE,iBAG5D,IAEHT,qBAAU,WAGRD,EAAYW,OAAO,6BAClB,IAcD,sBAAKnC,UAAU,MAAf,UACE,qBACEoC,IAAI,2GACJC,IAAI,KAEN,0CAAatC,KAGb,sBAAMC,UAAU,YAAhB,SACE,eAACsC,EAAA,EAAD,CAAatC,UAAU,mBAAvB,UACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,aACVwC,YAAY,qBACZC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAWtB,EAASsB,EAAMC,OAAOH,UAG7C,cAACI,EAAA,EAAD,CACE7C,UAAU,kBACV8C,UAAW1B,EACXf,QAAQ,YACRD,MAAM,UACN2C,KAAK,SACLC,QAnCU,SAACL,GACnBpC,EAAGmB,WAAW,YAAYuB,IAAI,CAC5BpD,QAASuB,EACTrB,SAAUA,EACVmD,UAAW1C,IAASS,UAAUkC,WAAWC,oBAG3C/B,EAAS,IACTsB,EAAMU,kBAqBA,SAQE,cAAC,IAAD,WAeN,cAAC,IAAD,UACG/B,EAASS,KAAI,gBAAGE,EAAH,EAAGA,GAAIpC,EAAP,EAAOA,QAAP,OACZ,cAAC,EAAD,CAAkBE,SAAUA,EAAUF,QAASA,GAAjCoC,YCtFTqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6cb7275b.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Message.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst Message = forwardRef(({ message, username }, ref) => {\n  const isUser = username === message.username;\n  return (\n    <div ref={ref} className={`message ${isUser && \"message__user\"}`}>\n      <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n        <CardContent>\n          <Typography color=\"white\" variant=\"h5\" component=\"h2\">\n            {!isUser && `${message.username || \"Unknown User\"}:`}{\" \"}\n            {message.message}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n});\n\nexport default Message;\n","import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBY5ClrUFZr6nVl_cedsJGKVgEMId7ghmw\",\n  authDomain: \"messenger-clone-f1b61.firebaseapp.com\",\n  projectId: \"messenger-clone-f1b61\",\n  storageBucket: \"messenger-clone-f1b61.appspot.com\",\n  messagingSenderId: \"557177951814\",\n  appId: \"1:557177951814:web:e505da43e8bcfa5a359c47\",\n  measurementId: \"G-QDPXSLJYD4\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  Input,\n  Icon,\n  IconButton,\n} from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nfunction App() {\n  // use state to do it fast and without refreshing\n  // useState is a short term memory every time we refresh it erases the memory\n  // useState = variable in react\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState(\"\");\n\n  // use effect allows us to run a piece of code once it loads in\n  // useEffect is a piece of code which executes on a condition\n  // useEffect = run code on a condition in React\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    // if its blank inside [],this code runs ONCE when the app component loads\n    // if we have a variable like input, it will run everytime input changes\n    setUsername(prompt(\"Please enter your name\"));\n  }, []); //condition\n\n  const sendMessage = (event) => {\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    // all the logic to send the message goes here\n    setInput(\"\");\n    event.preventDefault(); // To avoid form from refreshing after every enter\n  };\n\n  return (\n    <div className=\"app\">\n      <img\n        src=\"https://facebookbrand.com/wp-content/uploads/2020/10/Logo_Messenger_NewBlurple-399x399-1.png?w=100&h=100\"\n        alt=\"\"\n      />\n      <h2>Welcome {username}</h2>\n      {/* wrap it in a form for user input this will refresh it every time user hits enter */}\n      {/* Use form to allow user to hit enter and submit instead of pressing send message button */}\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input\n            className=\"app__input\"\n            placeholder=\"Enter a message...\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n\n          <IconButton\n            className=\"app__iconButton\"\n            disabled={!input}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n          >\n            <SendIcon />\n          </IconButton>\n\n          {/* <Button\n            disabled={!input}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n          >\n            Send Message\n          </Button> */}\n        </FormControl>\n      </form>\n\n      <FlipMove>\n        {messages.map(({ id, message }) => (\n          <Message key={id} username={username} message={message} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}